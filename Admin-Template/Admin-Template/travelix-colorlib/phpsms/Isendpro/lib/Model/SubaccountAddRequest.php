<?php
/**
 * SubaccountAddRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Isendpro
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API iSendPro
 *
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP
 *
 * OpenAPI spec version: 1.1.1
 * Contact: support@isendpro.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Isendpro\Model;

use \ArrayAccess;

/**
 * SubaccountAddRequest Class Doc Comment
 *
 * @category    Class
 * @package     Isendpro
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubaccountAddRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubaccountAddRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'keyid' => 'string',
        'sub_account_edit' => 'string',
        'sub_account_login' => 'string',
        'sub_account_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'keyid' => null,
        'sub_account_edit' => null,
        'sub_account_login' => null,
        'sub_account_password' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'keyid' => 'keyid',
        'sub_account_edit' => 'subAccountEdit',
        'sub_account_login' => 'subAccountLogin',
        'sub_account_password' => 'subAccountPassword'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'keyid' => 'setKeyid',
        'sub_account_edit' => 'setSubAccountEdit',
        'sub_account_login' => 'setSubAccountLogin',
        'sub_account_password' => 'setSubAccountPassword'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'keyid' => 'getKeyid',
        'sub_account_edit' => 'getSubAccountEdit',
        'sub_account_login' => 'getSubAccountLogin',
        'sub_account_password' => 'getSubAccountPassword'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SUB_ACCOUNT_EDIT_ADD_ACCOUNT = 'addAccount';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSubAccountEditAllowableValues()
    {
        return [
            self::SUB_ACCOUNT_EDIT_ADD_ACCOUNT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keyid'] = isset($data['keyid']) ? $data['keyid'] : null;
        $this->container['sub_account_edit'] = isset($data['sub_account_edit']) ? $data['sub_account_edit'] : null;
        $this->container['sub_account_login'] = isset($data['sub_account_login']) ? $data['sub_account_login'] : null;
        $this->container['sub_account_password'] = isset($data['sub_account_password']) ? $data['sub_account_password'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['keyid'] === null) {
            $invalid_properties[] = "'keyid' can't be null";
        }
        if ($this->container['sub_account_edit'] === null) {
            $invalid_properties[] = "'sub_account_edit' can't be null";
        }
        $allowed_values = $this->getSubAccountEditAllowableValues();
        if (!in_array($this->container['sub_account_edit'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'sub_account_edit', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['sub_account_login'] === null) {
            $invalid_properties[] = "'sub_account_login' can't be null";
        }
        if ($this->container['sub_account_password'] === null) {
            $invalid_properties[] = "'sub_account_password' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['keyid'] === null) {
            return false;
        }
        if ($this->container['sub_account_edit'] === null) {
            return false;
        }
        $allowed_values = $this->getSubAccountEditAllowableValues();
        if (!in_array($this->container['sub_account_edit'], $allowed_values)) {
            return false;
        }
        if ($this->container['sub_account_login'] === null) {
            return false;
        }
        if ($this->container['sub_account_password'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets keyid
     * @return string
     */
    public function getKeyid()
    {
        return $this->container['keyid'];
    }

    /**
     * Sets keyid
     * @param string $keyid
     * @return $this
     */
    public function setKeyid($keyid)
    {
        $this->container['keyid'] = $keyid;

        return $this;
    }

    /**
     * Gets sub_account_edit
     * @return string
     */
    public function getSubAccountEdit()
    {
        return $this->container['sub_account_edit'];
    }

    /**
     * Sets sub_account_edit
     * @param string $sub_account_edit
     * @return $this
     */
    public function setSubAccountEdit($sub_account_edit)
    {
        $allowed_values = $this->getSubAccountEditAllowableValues();
        if (!in_array($sub_account_edit, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sub_account_edit', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['sub_account_edit'] = $sub_account_edit;

        return $this;
    }

    /**
     * Gets sub_account_login
     * @return string
     */
    public function getSubAccountLogin()
    {
        return $this->container['sub_account_login'];
    }

    /**
     * Sets sub_account_login
     * @param string $sub_account_login
     * @return $this
     */
    public function setSubAccountLogin($sub_account_login)
    {
        $this->container['sub_account_login'] = $sub_account_login;

        return $this;
    }

    /**
     * Gets sub_account_password
     * @return string
     */
    public function getSubAccountPassword()
    {
        return $this->container['sub_account_password'];
    }

    /**
     * Sets sub_account_password
     * @param string $sub_account_password
     * @return $this
     */
    public function setSubAccountPassword($sub_account_password)
    {
        $this->container['sub_account_password'] = $sub_account_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Isendpro\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Isendpro\ObjectSerializer::sanitizeForSerialization($this));
    }
}


