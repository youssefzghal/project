<?php
/**
 * REPERTOIREmodifrequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Isendpro
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API iSendPro
 *
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP
 *
 * OpenAPI spec version: 1.1.1
 * Contact: support@isendpro.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Isendpro\Model;

use \ArrayAccess;

/**
 * REPERTOIREmodifrequest Class Doc Comment
 *
 * @category    Class
 * @package     Isendpro
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class REPERTOIREmodifrequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'REPERTOIREmodifrequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'keyid' => 'string',
        'repertoire_edit' => 'string',
        'repertoire_id' => 'string',
        'num' => 'string[]',
        'champ1' => 'string[]',
        'champ2' => 'string[]',
        'champ3' => 'string[]',
        'champ4' => 'string[]',
        'champ5' => 'string[]',
        'champ6' => 'string[]',
        'champ7' => 'string[]',
        'champ8' => 'string[]',
        'champ9' => 'string[]',
        'champ10' => 'string[]',
        'champ11' => 'string[]',
        'champ12' => 'string[]',
        'champ13' => 'string[]',
        'champ14' => 'string[]',
        'champ15' => 'string[]',
        'champ16' => 'string[]',
        'champ17' => 'string[]',
        'champ18' => 'string[]',
        'champ19' => 'string[]',
        'champ20' => 'string[]',
        'champ21' => 'string[]',
        'champ22' => 'string[]',
        'champ23' => 'string[]',
        'champ24' => 'string[]',
        'champ25' => 'string[]',
        'champ26' => 'string[]',
        'champ27' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'keyid' => null,
        'repertoire_edit' => null,
        'repertoire_id' => null,
        'num' => null,
        'champ1' => null,
        'champ2' => null,
        'champ3' => null,
        'champ4' => null,
        'champ5' => null,
        'champ6' => null,
        'champ7' => null,
        'champ8' => null,
        'champ9' => null,
        'champ10' => null,
        'champ11' => null,
        'champ12' => null,
        'champ13' => null,
        'champ14' => null,
        'champ15' => null,
        'champ16' => null,
        'champ17' => null,
        'champ18' => null,
        'champ19' => null,
        'champ20' => null,
        'champ21' => null,
        'champ22' => null,
        'champ23' => null,
        'champ24' => null,
        'champ25' => null,
        'champ26' => null,
        'champ27' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'keyid' => 'keyid',
        'repertoire_edit' => 'repertoireEdit',
        'repertoire_id' => 'repertoireId',
        'num' => 'num',
        'champ1' => 'champ1',
        'champ2' => 'champ2',
        'champ3' => 'champ3',
        'champ4' => 'champ4',
        'champ5' => 'champ5',
        'champ6' => 'champ6',
        'champ7' => 'champ7',
        'champ8' => 'champ8',
        'champ9' => 'champ9',
        'champ10' => 'champ10',
        'champ11' => 'champ11',
        'champ12' => 'champ12',
        'champ13' => 'champ13',
        'champ14' => 'champ14',
        'champ15' => 'champ15',
        'champ16' => 'champ16',
        'champ17' => 'champ17',
        'champ18' => 'champ18',
        'champ19' => 'champ19',
        'champ20' => 'champ20',
        'champ21' => 'champ21',
        'champ22' => 'champ22',
        'champ23' => 'champ23',
        'champ24' => 'champ24',
        'champ25' => 'champ25',
        'champ26' => 'champ26',
        'champ27' => 'champ27'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'keyid' => 'setKeyid',
        'repertoire_edit' => 'setRepertoireEdit',
        'repertoire_id' => 'setRepertoireId',
        'num' => 'setNum',
        'champ1' => 'setChamp1',
        'champ2' => 'setChamp2',
        'champ3' => 'setChamp3',
        'champ4' => 'setChamp4',
        'champ5' => 'setChamp5',
        'champ6' => 'setChamp6',
        'champ7' => 'setChamp7',
        'champ8' => 'setChamp8',
        'champ9' => 'setChamp9',
        'champ10' => 'setChamp10',
        'champ11' => 'setChamp11',
        'champ12' => 'setChamp12',
        'champ13' => 'setChamp13',
        'champ14' => 'setChamp14',
        'champ15' => 'setChamp15',
        'champ16' => 'setChamp16',
        'champ17' => 'setChamp17',
        'champ18' => 'setChamp18',
        'champ19' => 'setChamp19',
        'champ20' => 'setChamp20',
        'champ21' => 'setChamp21',
        'champ22' => 'setChamp22',
        'champ23' => 'setChamp23',
        'champ24' => 'setChamp24',
        'champ25' => 'setChamp25',
        'champ26' => 'setChamp26',
        'champ27' => 'setChamp27'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'keyid' => 'getKeyid',
        'repertoire_edit' => 'getRepertoireEdit',
        'repertoire_id' => 'getRepertoireId',
        'num' => 'getNum',
        'champ1' => 'getChamp1',
        'champ2' => 'getChamp2',
        'champ3' => 'getChamp3',
        'champ4' => 'getChamp4',
        'champ5' => 'getChamp5',
        'champ6' => 'getChamp6',
        'champ7' => 'getChamp7',
        'champ8' => 'getChamp8',
        'champ9' => 'getChamp9',
        'champ10' => 'getChamp10',
        'champ11' => 'getChamp11',
        'champ12' => 'getChamp12',
        'champ13' => 'getChamp13',
        'champ14' => 'getChamp14',
        'champ15' => 'getChamp15',
        'champ16' => 'getChamp16',
        'champ17' => 'getChamp17',
        'champ18' => 'getChamp18',
        'champ19' => 'getChamp19',
        'champ20' => 'getChamp20',
        'champ21' => 'getChamp21',
        'champ22' => 'getChamp22',
        'champ23' => 'getChamp23',
        'champ24' => 'getChamp24',
        'champ25' => 'getChamp25',
        'champ26' => 'getChamp26',
        'champ27' => 'getChamp27'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const REPERTOIRE_EDIT_ADD = 'add';
    const REPERTOIRE_EDIT_DEL = 'del';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRepertoireEditAllowableValues()
    {
        return [
            self::REPERTOIRE_EDIT_ADD,
            self::REPERTOIRE_EDIT_DEL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keyid'] = isset($data['keyid']) ? $data['keyid'] : null;
        $this->container['repertoire_edit'] = isset($data['repertoire_edit']) ? $data['repertoire_edit'] : null;
        $this->container['repertoire_id'] = isset($data['repertoire_id']) ? $data['repertoire_id'] : null;
        $this->container['num'] = isset($data['num']) ? $data['num'] : null;
        $this->container['champ1'] = isset($data['champ1']) ? $data['champ1'] : null;
        $this->container['champ2'] = isset($data['champ2']) ? $data['champ2'] : null;
        $this->container['champ3'] = isset($data['champ3']) ? $data['champ3'] : null;
        $this->container['champ4'] = isset($data['champ4']) ? $data['champ4'] : null;
        $this->container['champ5'] = isset($data['champ5']) ? $data['champ5'] : null;
        $this->container['champ6'] = isset($data['champ6']) ? $data['champ6'] : null;
        $this->container['champ7'] = isset($data['champ7']) ? $data['champ7'] : null;
        $this->container['champ8'] = isset($data['champ8']) ? $data['champ8'] : null;
        $this->container['champ9'] = isset($data['champ9']) ? $data['champ9'] : null;
        $this->container['champ10'] = isset($data['champ10']) ? $data['champ10'] : null;
        $this->container['champ11'] = isset($data['champ11']) ? $data['champ11'] : null;
        $this->container['champ12'] = isset($data['champ12']) ? $data['champ12'] : null;
        $this->container['champ13'] = isset($data['champ13']) ? $data['champ13'] : null;
        $this->container['champ14'] = isset($data['champ14']) ? $data['champ14'] : null;
        $this->container['champ15'] = isset($data['champ15']) ? $data['champ15'] : null;
        $this->container['champ16'] = isset($data['champ16']) ? $data['champ16'] : null;
        $this->container['champ17'] = isset($data['champ17']) ? $data['champ17'] : null;
        $this->container['champ18'] = isset($data['champ18']) ? $data['champ18'] : null;
        $this->container['champ19'] = isset($data['champ19']) ? $data['champ19'] : null;
        $this->container['champ20'] = isset($data['champ20']) ? $data['champ20'] : null;
        $this->container['champ21'] = isset($data['champ21']) ? $data['champ21'] : null;
        $this->container['champ22'] = isset($data['champ22']) ? $data['champ22'] : null;
        $this->container['champ23'] = isset($data['champ23']) ? $data['champ23'] : null;
        $this->container['champ24'] = isset($data['champ24']) ? $data['champ24'] : null;
        $this->container['champ25'] = isset($data['champ25']) ? $data['champ25'] : null;
        $this->container['champ26'] = isset($data['champ26']) ? $data['champ26'] : null;
        $this->container['champ27'] = isset($data['champ27']) ? $data['champ27'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['keyid'] === null) {
            $invalid_properties[] = "'keyid' can't be null";
        }
        if ($this->container['repertoire_edit'] === null) {
            $invalid_properties[] = "'repertoire_edit' can't be null";
        }
        $allowed_values = $this->getRepertoireEditAllowableValues();
        if (!in_array($this->container['repertoire_edit'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'repertoire_edit', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['repertoire_id'] === null) {
            $invalid_properties[] = "'repertoire_id' can't be null";
        }
        if ($this->container['num'] === null) {
            $invalid_properties[] = "'num' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['keyid'] === null) {
            return false;
        }
        if ($this->container['repertoire_edit'] === null) {
            return false;
        }
        $allowed_values = $this->getRepertoireEditAllowableValues();
        if (!in_array($this->container['repertoire_edit'], $allowed_values)) {
            return false;
        }
        if ($this->container['repertoire_id'] === null) {
            return false;
        }
        if ($this->container['num'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets keyid
     * @return string
     */
    public function getKeyid()
    {
        return $this->container['keyid'];
    }

    /**
     * Sets keyid
     * @param string $keyid Clé API
     * @return $this
     */
    public function setKeyid($keyid)
    {
        $this->container['keyid'] = $keyid;

        return $this;
    }

    /**
     * Gets repertoire_edit
     * @return string
     */
    public function getRepertoireEdit()
    {
        return $this->container['repertoire_edit'];
    }

    /**
     * Sets repertoire_edit
     * @param string $repertoire_edit action à réaliser, \"add\" pour l'ajout de numéros, \"del\" pour la suppression de numéros
     * @return $this
     */
    public function setRepertoireEdit($repertoire_edit)
    {
        $allowed_values = $this->getRepertoireEditAllowableValues();
        if (!in_array($repertoire_edit, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'repertoire_edit', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['repertoire_edit'] = $repertoire_edit;

        return $this;
    }

    /**
     * Gets repertoire_id
     * @return string
     */
    public function getRepertoireId()
    {
        return $this->container['repertoire_id'];
    }

    /**
     * Sets repertoire_id
     * @param string $repertoire_id repertoireId du répertoire cible
     * @return $this
     */
    public function setRepertoireId($repertoire_id)
    {
        $this->container['repertoire_id'] = $repertoire_id;

        return $this;
    }

    /**
     * Gets num
     * @return string[]
     */
    public function getNum()
    {
        return $this->container['num'];
    }

    /**
     * Sets num
     * @param string[] $num liste des numéros des téléphone à ajouter ou supprimer
     * @return $this
     */
    public function setNum($num)
    {
        $this->container['num'] = $num;

        return $this;
    }

    /**
     * Gets champ1
     * @return string[]
     */
    public function getChamp1()
    {
        return $this->container['champ1'];
    }

    /**
     * Sets champ1
     * @param string[] $champ1 Noms des contact
     * @return $this
     */
    public function setChamp1($champ1)
    {
        $this->container['champ1'] = $champ1;

        return $this;
    }

    /**
     * Gets champ2
     * @return string[]
     */
    public function getChamp2()
    {
        return $this->container['champ2'];
    }

    /**
     * Sets champ2
     * @param string[] $champ2 Champs A des contacts
     * @return $this
     */
    public function setChamp2($champ2)
    {
        $this->container['champ2'] = $champ2;

        return $this;
    }

    /**
     * Gets champ3
     * @return string[]
     */
    public function getChamp3()
    {
        return $this->container['champ3'];
    }

    /**
     * Sets champ3
     * @param string[] $champ3 Champs B des contacts
     * @return $this
     */
    public function setChamp3($champ3)
    {
        $this->container['champ3'] = $champ3;

        return $this;
    }

    /**
     * Gets champ4
     * @return string[]
     */
    public function getChamp4()
    {
        return $this->container['champ4'];
    }

    /**
     * Sets champ4
     * @param string[] $champ4 Champs C des contacts
     * @return $this
     */
    public function setChamp4($champ4)
    {
        $this->container['champ4'] = $champ4;

        return $this;
    }

    /**
     * Gets champ5
     * @return string[]
     */
    public function getChamp5()
    {
        return $this->container['champ5'];
    }

    /**
     * Sets champ5
     * @param string[] $champ5 Champs D des contacts
     * @return $this
     */
    public function setChamp5($champ5)
    {
        $this->container['champ5'] = $champ5;

        return $this;
    }

    /**
     * Gets champ6
     * @return string[]
     */
    public function getChamp6()
    {
        return $this->container['champ6'];
    }

    /**
     * Sets champ6
     * @param string[] $champ6 Champs E des contacts
     * @return $this
     */
    public function setChamp6($champ6)
    {
        $this->container['champ6'] = $champ6;

        return $this;
    }

    /**
     * Gets champ7
     * @return string[]
     */
    public function getChamp7()
    {
        return $this->container['champ7'];
    }

    /**
     * Sets champ7
     * @param string[] $champ7 Champs F des contacts
     * @return $this
     */
    public function setChamp7($champ7)
    {
        $this->container['champ7'] = $champ7;

        return $this;
    }

    /**
     * Gets champ8
     * @return string[]
     */
    public function getChamp8()
    {
        return $this->container['champ8'];
    }

    /**
     * Sets champ8
     * @param string[] $champ8 Champs G des contacts
     * @return $this
     */
    public function setChamp8($champ8)
    {
        $this->container['champ8'] = $champ8;

        return $this;
    }

    /**
     * Gets champ9
     * @return string[]
     */
    public function getChamp9()
    {
        return $this->container['champ9'];
    }

    /**
     * Sets champ9
     * @param string[] $champ9 Champs H des contacts
     * @return $this
     */
    public function setChamp9($champ9)
    {
        $this->container['champ9'] = $champ9;

        return $this;
    }

    /**
     * Gets champ10
     * @return string[]
     */
    public function getChamp10()
    {
        return $this->container['champ10'];
    }

    /**
     * Sets champ10
     * @param string[] $champ10 Champs I des contacts
     * @return $this
     */
    public function setChamp10($champ10)
    {
        $this->container['champ10'] = $champ10;

        return $this;
    }

    /**
     * Gets champ11
     * @return string[]
     */
    public function getChamp11()
    {
        return $this->container['champ11'];
    }

    /**
     * Sets champ11
     * @param string[] $champ11 Champs J des contacts
     * @return $this
     */
    public function setChamp11($champ11)
    {
        $this->container['champ11'] = $champ11;

        return $this;
    }

    /**
     * Gets champ12
     * @return string[]
     */
    public function getChamp12()
    {
        return $this->container['champ12'];
    }

    /**
     * Sets champ12
     * @param string[] $champ12 Champs K des contacts
     * @return $this
     */
    public function setChamp12($champ12)
    {
        $this->container['champ12'] = $champ12;

        return $this;
    }

    /**
     * Gets champ13
     * @return string[]
     */
    public function getChamp13()
    {
        return $this->container['champ13'];
    }

    /**
     * Sets champ13
     * @param string[] $champ13 Champs L des contacts
     * @return $this
     */
    public function setChamp13($champ13)
    {
        $this->container['champ13'] = $champ13;

        return $this;
    }

    /**
     * Gets champ14
     * @return string[]
     */
    public function getChamp14()
    {
        return $this->container['champ14'];
    }

    /**
     * Sets champ14
     * @param string[] $champ14 Champs M des contacts
     * @return $this
     */
    public function setChamp14($champ14)
    {
        $this->container['champ14'] = $champ14;

        return $this;
    }

    /**
     * Gets champ15
     * @return string[]
     */
    public function getChamp15()
    {
        return $this->container['champ15'];
    }

    /**
     * Sets champ15
     * @param string[] $champ15 Champs N des contacts
     * @return $this
     */
    public function setChamp15($champ15)
    {
        $this->container['champ15'] = $champ15;

        return $this;
    }

    /**
     * Gets champ16
     * @return string[]
     */
    public function getChamp16()
    {
        return $this->container['champ16'];
    }

    /**
     * Sets champ16
     * @param string[] $champ16 Champs O des contacts
     * @return $this
     */
    public function setChamp16($champ16)
    {
        $this->container['champ16'] = $champ16;

        return $this;
    }

    /**
     * Gets champ17
     * @return string[]
     */
    public function getChamp17()
    {
        return $this->container['champ17'];
    }

    /**
     * Sets champ17
     * @param string[] $champ17 Champs P des contacts
     * @return $this
     */
    public function setChamp17($champ17)
    {
        $this->container['champ17'] = $champ17;

        return $this;
    }

    /**
     * Gets champ18
     * @return string[]
     */
    public function getChamp18()
    {
        return $this->container['champ18'];
    }

    /**
     * Sets champ18
     * @param string[] $champ18 Champs Q des contacts
     * @return $this
     */
    public function setChamp18($champ18)
    {
        $this->container['champ18'] = $champ18;

        return $this;
    }

    /**
     * Gets champ19
     * @return string[]
     */
    public function getChamp19()
    {
        return $this->container['champ19'];
    }

    /**
     * Sets champ19
     * @param string[] $champ19 Champs R des contacts
     * @return $this
     */
    public function setChamp19($champ19)
    {
        $this->container['champ19'] = $champ19;

        return $this;
    }

    /**
     * Gets champ20
     * @return string[]
     */
    public function getChamp20()
    {
        return $this->container['champ20'];
    }

    /**
     * Sets champ20
     * @param string[] $champ20 Champs S des contacts
     * @return $this
     */
    public function setChamp20($champ20)
    {
        $this->container['champ20'] = $champ20;

        return $this;
    }

    /**
     * Gets champ21
     * @return string[]
     */
    public function getChamp21()
    {
        return $this->container['champ21'];
    }

    /**
     * Sets champ21
     * @param string[] $champ21 Champs T des contacts
     * @return $this
     */
    public function setChamp21($champ21)
    {
        $this->container['champ21'] = $champ21;

        return $this;
    }

    /**
     * Gets champ22
     * @return string[]
     */
    public function getChamp22()
    {
        return $this->container['champ22'];
    }

    /**
     * Sets champ22
     * @param string[] $champ22 Champs U des contacts
     * @return $this
     */
    public function setChamp22($champ22)
    {
        $this->container['champ22'] = $champ22;

        return $this;
    }

    /**
     * Gets champ23
     * @return string[]
     */
    public function getChamp23()
    {
        return $this->container['champ23'];
    }

    /**
     * Sets champ23
     * @param string[] $champ23 Champs V des contacts
     * @return $this
     */
    public function setChamp23($champ23)
    {
        $this->container['champ23'] = $champ23;

        return $this;
    }

    /**
     * Gets champ24
     * @return string[]
     */
    public function getChamp24()
    {
        return $this->container['champ24'];
    }

    /**
     * Sets champ24
     * @param string[] $champ24 Champs W des contacts
     * @return $this
     */
    public function setChamp24($champ24)
    {
        $this->container['champ24'] = $champ24;

        return $this;
    }

    /**
     * Gets champ25
     * @return string[]
     */
    public function getChamp25()
    {
        return $this->container['champ25'];
    }

    /**
     * Sets champ25
     * @param string[] $champ25 Champs X des contacts
     * @return $this
     */
    public function setChamp25($champ25)
    {
        $this->container['champ25'] = $champ25;

        return $this;
    }

    /**
     * Gets champ26
     * @return string[]
     */
    public function getChamp26()
    {
        return $this->container['champ26'];
    }

    /**
     * Sets champ26
     * @param string[] $champ26 Champs Y des contacts
     * @return $this
     */
    public function setChamp26($champ26)
    {
        $this->container['champ26'] = $champ26;

        return $this;
    }

    /**
     * Gets champ27
     * @return string[]
     */
    public function getChamp27()
    {
        return $this->container['champ27'];
    }

    /**
     * Sets champ27
     * @param string[] $champ27 Champs Z des contacts
     * @return $this
     */
    public function setChamp27($champ27)
    {
        $this->container['champ27'] = $champ27;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Isendpro\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Isendpro\ObjectSerializer::sanitizeForSerialization($this));
    }
}


